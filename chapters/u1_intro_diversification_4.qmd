---
title: "Introducci√≥n a modelos State Speciaction-Extinci√≥n (SSE)"
format: html
execute:
  echo: true   # Muestra el c√≥digo
  warning: false  # Oculta advertencias
  fig-width: 12   # Ancho del gr√°fico
  fig-height: 8   # Altura del gr√°fico
---

# Presentaci√≥n: Introducci√≥n a modelos State Speciaction-Extinci√≥n (SSE)

[![](../images/u1_PatDiv/u1_PatDiv_5.png){fig-align="center" width="500"}](../docs/u1_PatDiv/5_ModSSE.pdf)

Haz clic en la imagen para ver el PDF de la presentaci√≥n

Analizaremos si las tasas de diversificaci√≥n est√°n asociadas al tipo de hospedero en los escarabajos meloidos (Meloidae). Las subfamilias Nemognathinae y Meloinae presentan un ciclo de vida complejo, caracterizado por m√∫ltiples metamorfosis y estrategias de parasitoidismo. La mayor√≠a de los g√©neros y tribus dentro de estas subfamilias son parasitoides de abejas, incluyendo especies for√©ticas y no for√©ticas. Sin embargo, dos tribus han adoptado una estrategia distinta, aliment√°ndose de huevos de saltamontes. Estas diferencias en las estrategias de vida est√°n asociadas con marcadas variaciones en la riqueza de especies entre clados ([L√≥pez-Estrada et al., 2019](https://onlinelibrary.wiley.com/doi/full/10.1111/mec.16390)).

# Modelo BiSSE (Binary state speciation and extinction, [Madisson et al. 2007](https://academic.oup.com/sysbio/article/56/5/701/1694265))

BiSSE el modelo de especiaci√≥n y extinci√≥n dependendiente de un caracter binario y es un proceso estoc√°stico que se forma de la composici√≥n de dos procesos de nacimiento y muerte. Los dos procesos se conectan a trav√©s de dos tasas de cambio conocidas como las tasas de transici√≥n. El supuesto m√°s importante del modelo BiSSE es que cada estado tiene su propia tasa de especiaci√≥n $\lambda$ y su propia tasa de extinci√≥n $\mu$ que representan el momento en el cu√°l un linaje se divide en dos o se extingue. Este es un supuesto muy importante porque la implicaci√≥n es que la acumulaci√≥n (o la falta de acumulaci√≥n) de linajes es el resultado del valor del estado. Pueden encontrar mas informaci√≥n en el material del taller [Filo-Bayes](https://ixchelgzlzr.github.io/filo_bayes_UNAM/) - [BISSE](https://ixchelgzlzr.github.io/filo_bayes_UNAM/docs/discrete/SSEmodels.html).

**Escarabajos meloidos**

![](/images/u1_PatDiv/u1_PatDiv_6.png){fig-align="center" width="550"}

Las transiciones entre estados ocurren a tasas $q_{01}$ (de abeja a saltamontes) y $q_{10}$ (de saltamontes a abeja). Cada estado tiene su propia tasa de especiaci√≥n ($\lambda_0, \lambda_1$) y extinci√≥n ($\mu_0, \mu_1$).

**Matriz de tasas de transici√≥n (**$Q$)

La matriz de transici√≥n $Q$ define la probabilidad de cambio entre estados en un tiempo infinitesimal:

$$
Q =
\begin{bmatrix}
  -q_{01} & q_{01} \\
  q_{10} & -q_{10}
\end{bmatrix}
$$

Donde:

-   $q_{01}$: es la tasa de transici√≥n de hospedero abeja a hospedero saltamontes.

-   $q_{10}$: es la tasa de transici√≥n de hospedero saltamontes a hospedero abeja.

-   La diagonal contiene los valores negativos de las tasas de salida de cada estado ($-q_{01}$ y $-q_{10}$), de modo que cada fila suma cero.

**Par√°metros en el modelo BiSSE**

El modelo incluye seis par√°metros fundamentales:

-   $\lambda_0$: tasa de especiaci√≥n en el estado 0 (hospedero abeja)

-   $\lambda_1$: tasa de especiaci√≥n en el estado 1 (hospedero saltamontes)

-   $\mu_0$: tasa de extinci√≥n en el estado 0

-   $\mu_1$: tasa de extinci√≥n en el estado 1

-   $q_{01}$: tasa de cambio de hospedero abeja a hospedero saltamontes

-   $q_{10}$: tasa de cambio de hospedero saltamontes a hospedero abeja

## Descarga del √Årbol Filogen√©tico y la matriz codificada

üì• Puedes descargar el archivo **.tre** con el √°rbol en el siguiente enlace:

<a href="../docs/u1_PatDiv/ConLyttini.tre" download>üì• Descargar √Årbol Filogen√©tico</a>

üì• Puedes descargar el archivo **.nex** con la matriz codificada en el siguiente enlace:

<a href="../docs/u1_PatDiv/Traits_conLyttini_01.nex" download>üì• Descargar Matriz Codificada</a>

Guarda los archivos en la carpeta correspondiente y verifica su ubicaci√≥n antes de continuar.

## Carga de la filogenia y los datos

Crea un script `.Rev` y copia el codigo de la siguiente secci√≥n:

``` r
# Leer el arbol
T <- readTrees("../data/ConLyttini.tre")[1]

# Leer la matriz de caracteres
datos <- readCharacterData("../data/Traits_conLyttini_01.nex")
```

## Definir el n√∫mero de estados en los modelos BISSE

``` r
NUM_STATES = 2
```

## Definir vectores para almacenar los movimientos de MCMC y los monitores de resultados.

``` r
moves    = VectorMoves()
monitors = VectorMonitors()
```

## Valores de la log-normal

De acuerdo con Nee et al. (1994) el n√∫mero esperado de linajes en la corona de un clado con `n` taxones bajo un proceso de nacimiento y muerte en el tiempo `t` es:

$(\lambda - \mu) = \frac{In(n)/2}{t}$

En donde: `n` = es el n√∫mero de especies y `t` = es la edad de la filogenia

``` r
# Definimos una a priori log normal
rate_mean <- ln(ln(3000.0/2.0) / T.rootAge())

# Con una varianza que es amplia
rate_sd <- 0.587405

for (i in 1:NUM_STATES) {
# lognormales de las especiaciones
  log_speciation[i] ~ dnNormal(mean=rate_mean, sd=rate_sd) 
  speciation[i] := exp(log_speciation[i])
  moves.append(mvSlide(log_speciation[i], delta=0.20, tune=true, weight=3.0))

# lognormales de las extinciones
  log_extinction[i] ~ dnNormal(mean=rate_mean, sd=rate_sd)  
  extinction[i] := exp(log_extinction[i])
  moves.append(mvSlide(log_extinction[i], delta=0.20, tune=true, weight=3.0))
}
```

## Definir la **matriz de tasas de transici√≥n** entre los estados del car√°cter

``` r
# Calcula la suma de todas las longitudes de las ramas del √°rbol filogen√©tico
# Dividido por 10: Esto asume que en promedio ocurren 10 cambios de estado a lo largo del √°rbol
rate_pr := T.treeLength() / 10
```

## Definici√≥n de las tasas de transici√≥n

``` r
# Tasa de transici√≥n de estado 1 ‚Üí estado 2 
rate_12 ~ dnExp(rate_pr)

# Tasa de transici√≥n de estado 2 ‚Üí estado 1 
rate_21 ~ dnExp(rate_pr)

# Definici√≥n de movimientos 
moves.append(mvScale(rate_12, weight=2))
moves.append(mvScale(rate_21, weight=2))
```

**¬øPor qu√© usar una exponencial?**

-   La distribuci√≥n exponencial es adecuada para modelar **tasas de transici√≥n** porque impone la condici√≥n de que siempre sean **positivas**.

-   Tambi√©n asigna **mayor probabilidad a valores peque√±os**, lo que significa que los cambios de estado no ocurren demasiado r√°pido.

## Creaci√≥n de la matriz de tasas de transici√≥n

``` r
rate_matrix := fnFreeBinary([rate_12, rate_21 ], rescaled=false)
```

## Frecuencias del estado en la ra√≠z

``` r
rate_category_prior ~ dnDirichlet(rep(1,NUM_STATES))
moves.append(mvDirichletSimplex(rate_category_prior, tune=true, weight=2))
```

## Fijar la edad de la ra√≠z

``` r
root <- T.rootAge()
```

## Definir $\rho$ : Proporci√≥n de especies muestreadas

``` r
rho <- T.ntips()/3000
```

## Construcci√≥n del √°rbol evolutivo generado a partir de un proceso de nacimiento y muerte dependiente del car√°cter

``` r
timetree ~ dnCDBDP(rootAge = root, speciationRates = speciation, extinctionRates = extinction, Q = rate_matrix, pi = rate_category_prior, delta = 1.0, rho = rho, condition = "time")
```

üîπ **Par√°metros del proceso de nacimiento y muerte (`dnCDBDP`)**:

-   **`rootAge = root`** ‚Üí Se fija la edad de la ra√≠z usando `root = T.rootAge()`.

-   **`speciationRates = speciation`** ‚Üí Se usa la tasa de especiaci√≥n (`Œª`).

-   **`extinctionRates = extinction`** ‚Üí Se usa la tasa de extinci√≥n (`Œº`).

-   **`Q = rate_matrix`** ‚Üí Usa la **matriz de tasas de transici√≥n** de caracteres (`rate_12`, `rate_21`).

-   **`pi = rate_category_prior`** ‚Üí Usa la distribuci√≥n **a priori** de los estados en la ra√≠z.

-   **`delta = 1.0`** ‚Üí Par√°metro de ajuste para la distribuci√≥n de tiempos de especiaci√≥n/extinci√≥n.

-   **`rho = rho`** ‚Üí Probabilidad de muestreo de especies (`rho = T.ntips()/3000`).

-   **`condition = "time"`** ‚Üí Condiciona el proceso a un tiempo de ra√≠z fijo.

## Fijar (`clamp`) los datos observados

``` r
timetree.clamp(T)
timetree.clampCharData(datos)
```

## Creaci√≥n del modelo

``` r
### workspace model wrapper ###
mymodel = model(rate_matrix)
```

## Configuraci√≥n de los monitores

Los **monitores** guardan los resultados en archivos o los imprimen en pantalla.

``` r
monitors.append(mnModel(filename="../out/Bisse/mitos_BiSSE_clyttini.log", printgen=1))
monitors.append(mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="Standard", printgen=1, withTips=true, withStartStates=false, filename="../out/Bisse/anc_states_MITOS_BiSSE_clyttini.log"))
monitors.append(mnStochasticCharacterMap(cdbdp=timetree, printgen=10, filename="../out/Bisse/SCHM_BiSSE_clyttini.log"))
monitors.append(mnScreen(printgen=10, rate_12, rate_21, speciation, extinction))
```

## **Inicializar y Ejecutar el MCMC**

Con el modelo y los monitores listos, creamos el **objeto MCMC** e iniciamos la simulaci√≥n.

``` r
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")
```

-   `mymodel`: hace referencia al modelo que est√°s analizando.

-   `monitors`: son las variables que se registrar√°n en el archivo de salida.

-   `moves`: operadores MCMC que proponen cambios en los par√°metros del modelo.

-   `nruns=1`: solo una cadena MCMC (puedes usar m√°s si deseas una inferencia m√°s robusta).

-   `moveschedule="random"`: ejecuta los operadores en orden aleatorio para evitar sesgos en la exploraci√≥n del espacio de par√°metros.

## Ejecutar el MCMC

``` r
mymcmc.run(generations=400)
```

## Generar un √°rbol anotado con los estados ancestrales (MAP)

``` r
anc_states = readAncestralStateTrace("../out/Bisse/anc_states_MITOS_BiSSE_clyttini.log")

anc_tree = ancestralStateTree(tree=T, ancestral_state_trace_vector=anc_states, include_start_states=false, file="../out/Bisse/mitos_bisse_anc_states_results.tree", burnin=0.2, summary_statistic="MAP", site=1)
```

## Generar un mapeo estoc√°stico de caracteres (Stochastic Character Mapping)

``` r
anc_state_trace = readAncestralStateTrace("../out/Bisse/SCHM_BiSSE_clyttini.log")

characterMapTree(tree=T, ancestral_state_trace_vector=anc_state_trace, character_file="../out/Bisse/mitos_bisse_stoch_map_character.tree", posterior_file="../out/Bisse/mitos_bisse_stoch_map_posterior.tree", burnin=0.2, reconstruction="marginal")
```

## Visualizaci√≥n en R con RevGadgets

```{r, , results='hide'}
library(tidyverse)
library(RevGadgets)
library(ggtree)

# Cargar el archivo de estados ancestrales
bisse_file <- paste0("../docs/u1_PatDiv/output/bisse/mitos_bisse_anc_states_results.tree")
p_anc <- processAncStates(bisse_file)

# Definir paleta de colores personalizada
traitcols <- c("#F29494", "#5FD9D9")  

# Generar el gr√°fico con estados 
plot <- plotAncStatesMAP(p_anc,
        tree_layout = "rect",
        tip_labels_size = 1) +
        # Aplicar la paleta de colores
        scale_color_manual(values = traitcols) +
        scale_fill_manual(values = traitcols) +
        # Modificar leyenda y otros elementos de ggplot2
        theme(legend.position = c(0.1, 0.85),
              legend.key.size = unit(0.3, 'cm'), # Tama√±o de la clave de la leyenda
              legend.title = element_text(size = 6), # Tama√±o del t√≠tulo de la leyenda
              legend.text = element_text(size = 4))  # Tama√±o del texto de la leyenda

# Mostrar el gr√°fico
plot

# Generar el gr√°fico con ramas coloreadas por estado ancestral
plot_2 <- ggtree(p_anc, layout = "rectangular", aes(color = anc_state_1)) +
  scale_color_manual(name = "Estado", values = traitcols) +  
  theme_minimal() +
  ggtitle("BISSE") +
  theme(legend.position = c(0.1, 0.85),
        legend.key.size = unit(0.3, 'cm'), # Tama√±o de la clave de la leyenda
        legend.title = element_text(size = 6), # Tama√±o del t√≠tulo de la leyenda
        legend.text = element_text(size = 4))  # Tama√±o del texto de la leyenda

# Mostrar el gr√°fico
plot_2

```

## Graficar las tasas de transici√≥n

```{r}
library(tidyverse)

# Leer el archivo de salida de RevBayes
bisse <- read.table("../docs/u1_PatDiv/output/bisse/mitos_BiSSE_clyttini.log", header = TRUE)

# Definir colores para los estados 0 y 1
traitcols <- c("#F29494", "#5FD9D9")  

# Crear un dataframe con solo las tasas de transici√≥n
transition_rates <- data.frame(
  dens = c(bisse$rate_12, bisse$rate_21), 
  rate = rep(c("0", "1"), each = length(bisse$rate_12))
)

# Crear un gr√°fico de viol√≠n para las tasas de transici√≥n
violin_transitions <- ggplot(transition_rates, aes(x = rate, y = dens, fill = rate)) +
  geom_violin(trim = FALSE) +
  labs(title = "Tasas de Transici√≥n", x = "Estado", y = "Tasa") +
  scale_fill_manual(name = "Estado", values = traitcols) +
  theme_classic()

# Mostrar la gr√°fica
violin_transitions
```

## Graficar las tasas de diversificaci√≥n neta

```{r}
# Calcular la tasa de diversificaci√≥n neta: especiaci√≥n - extinci√≥n
netdiversification_rates <- data.frame(
  dens = c(bisse$speciation.1. - bisse$extinction.1.,
           bisse$speciation.2. - bisse$extinction.2.),
  rate = rep(c("0", "1"), each = length(bisse$speciation.1.))
)

# Convertir la variable de estado en factor
netdiversification_rates$rate <- factor(netdiversification_rates$rate, levels = c("0", "1"))

# Crear el gr√°fico de viol√≠n para tasas de diversificaci√≥n neta
violin_diversification <- ggplot(netdiversification_rates, aes(x = rate, y = dens, fill = rate)) +
  geom_violin(trim = FALSE) +
  labs(title = "Tasas de Diversificaci√≥n Neta", x = "Estado", y = "Tasa") +
  scale_fill_manual(name = "Estado", values = traitcols) +
  theme_classic()

# Mostrar la gr√°fica
violin_diversification
```

## Graficar tasas de especiaci√≥n

```{r}
# Crear un dataframe con tasas de especiaci√≥n para cada estado
speciation_rates <- data.frame(
  dens = c(bisse$speciation.1.,  bisse$speciation.2.), 
  rate = rep(c("0", "1"), each = length(bisse$speciation.1.))
)

# Crear gr√°fico de viol√≠n para las tasas de especiaci√≥n
violin_speciation <- ggplot(speciation_rates, aes(x = rate, y = dens, fill = rate)) +
  geom_violin(trim = FALSE) +
  labs(title = "Tasas de Especiaci√≥n", x = "Estado", y = "Tasa de Especiaci√≥n") +
  scale_fill_manual(name = "Estado", values = traitcols) +
  theme_classic()

# Mostrar la gr√°fica
violin_speciation
```

## Graficar tasas de extinci√≥n

```{r}
# Crear un dataframe con tasas de extinci√≥n para cada estado
extinction_rates <- data.frame(
  dens = c(bisse$extinction.1., bisse$extinction.2.), 
  rate = rep(c("0", "1"), each = length(bisse$extinction.1.))
)

# Crear gr√°fico de viol√≠n para tasas de extinci√≥n
violin_extinction <- ggplot(extinction_rates, aes(x = rate, y = dens, fill = rate)) +
  geom_violin(trim = FALSE) +
  labs(title = "Tasas de Extinci√≥n", x = "Estado", y = "Tasa de Extinci√≥n") +
  scale_fill_manual(name = "Estado", values = traitcols) +
  theme_classic()

# Mostrar la gr√°fica
violin_extinction
```

# Modelo de diversificaci√≥n con estados escondidos (HISSE)

Uno de los descubrimientos m√°s importantes en el campo de los modelos de diversificaci√≥n dependientes de estado (SSE) fue hecho por [Rabosky y Goldberg (2015)](https://pubmed.ncbi.nlm.nih.gov/25601943/). Estos autores encontraron, que BiSSE generaba un elevado error tipo I. En estad√≠stica este error se refiere a rechazar la hip√≥tesis nula cuando en general la hip√≥tesis es verdadera.

**Modelo HiSSE con dos estados y asociando a dos estados escondidos**

![](/images/u1_PatDiv/u1_PatDiv_7.jpeg){fig-align="center" width="500"}

-   Si tenemos dos estados 0 y 1, estos se convierten ahora en cuatro estados 0A, 0B, 1A, 1B.

-   Para cada uno de los estados definimos una nueva tasa de especiaci√≥n $\lambda_{0A}$, $\lambda_{0B}$, $\lambda_{1A}$ y $\lambda_{1B}$.

-   Para cada uno de los estados definimos una nueva tasa de extinci√≥n $\mu_{0A}$, $\mu_{0B}$, $\mu_{1A}$ y $\mu_{1B}$.

**Matriz de tasas de transici√≥n `Q`**

$$
Q =
\begin{bmatrix}
  - & q_{0A \to 0B} & q_{0A \to 1A} & 0 \\
  q_{0B \to 0A} & - & 0 & q_{0B \to 1B} \\
  q_{1A \to 0A} & 0 & - & q_{1A \to 1B} \\
  0 & q_{1B \to 0B} & q_{1B \to 1A} & -
\end{bmatrix}
$$

La matriz `Q` muestra c√≥mo los estados observables y ocultos interact√∫an, ayudando a inferir **c√≥mo los cambios de car√°cter afectan la especiaci√≥n y extinci√≥n**.

## Carga de la filogenia y los datos

Crea un script `.Rev` y copia el codigo de la siguiente secci√≥n:

``` r
# Leer el arbol
T <- readTrees("../data/ConLyttini.tre")[1]

# Leer la matriz de caracteres
datos <- readCharacterData("../data/Traits_conLyttini_01.nex")
```

## Definir el n√∫mero de estados en los modelos HISSE y paremetros globales

``` r
NUM_TOTAL_SPECIES     = 3000.0
NUM_STATES            = 2
NUM_HIDDEN            = 2
NUM_RATES             = NUM_STATES * NUM_HIDDEN
H                     = 0.587405
# Expansi√≥n de los Datos para Incluir Estados Ocultos 
data_exp <- datos.expandCharacters(NUM_HIDDEN)
```

## Definir vectores para almacenar los movimientos de MCMC y los monitores de resultados.

``` r
moves    = VectorMoves()
monitors = VectorMonitors()
```

## Extraer informaci√≥n del √°rbol filogen√©tico

``` r
taxa <- T.taxa()
tree_length <- T.treeLength()
```

## Definir la Media de las Tasas de Especiaci√≥n y Extinci√≥n

``` r
rate_mean <- (NUM_TOTAL_SPECIES - 2) / tree_length
```

‚úÖ Calcula la **media esperada de las tasas de especiaci√≥n y extinci√≥n** basada en el n√∫mero total de especies y la longitud del √°rbol.

## Especiaci√≥n y Extinci√≥n Oculta (Hidden Speciation Rates)

``` r
ln_speciation_hidden_mean <- ln(1.0)
ln_extinction_hidden_mean <- ln(1.0)
```

‚úÖ Define la media logar√≠tmica de las tasas ocultas de especiaci√≥n como 1.0 en una escala relativa. ‚úîÔ∏è Esto significa que los valores generados ser√°n proporcionales, y no absolutos.

## Variaci√≥n en las Tasas Ocultas de Especiaci√≥n y Extinci√≥n

``` r
speciation_hidden_sd ~ dnExponential(1.0 / H)
extinction_hidden_sd ~ dnExponential(1.0 / H)
```

## Movimiento MCMC para Optimizar la Desviaci√≥n Est√°ndar

``` r
moves.append(mvScale(speciation_hidden_sd, lambda=1, tune=true, weight=2.0))
moves.append(mvScale(extinction_hidden_sd, lambda=1, tune=true, weight=2.0))
```

## Definir la Distribuci√≥n de las Tasas Ocultas

``` r
speciation_hidden_unormalized := fnDiscretizeDistribution(dnLognormal(ln_speciation_hidden_mean, speciation_hidden_sd), NUM_HIDDEN)
extinction_hidden_unormalized := fnDiscretizeDistribution(dnLognormal(ln_extinction_hidden_mean, extinction_hidden_sd), NUM_HIDDEN)
```

‚úÖ Se genera un conjunto de tasas ocultas de especiaci√≥n a partir de una distribuci√≥n lognormal.

## Normalizaci√≥n de las Tasas Ocultas

``` r
speciation_hidden := speciation_hidden_unormalized / mean(speciation_hidden_unormalized)
extinction_hidden := extinction_hidden_unormalized / mean(extinction_hidden_unormalized)
```

‚úÖ Se normalizan las tasas ocultas dividi√©ndolas por su media, para que el promedio sea 1.0. ‚úîÔ∏è Esto garantiza que los valores sean relativos y comparables entre estados.

## Definir Tasas de Especiaci√≥n para Estados Observables

``` r
for (i in 1:NUM_STATES) {
    speciation_observed[i] ~ dnLoguniform( 1E-6, 1E2)
    speciation_observed[i].setValue( (NUM_TOTAL_SPECIES-2) / tree_length )
    moves.append( mvScale(speciation_observed[i], lambda=1.0, tune=true, weight=3.0) )
        ### Create a loguniform distributed variable for the extinction rate
    extinction_observed[i] ~ dnLoguniform( 1E-6, 1E2)
    extinction_observed[i].setValue( speciation_observed[i] / 10.0 )
    moves.append( mvScale(extinction_observed[i], lambda=1.0, tune=true, weight=3.0) )
}
```

## C√°lculo de las Tasas Combinadas

``` r
for (j in 1:NUM_HIDDEN) {
    for (i in 1:NUM_STATES) {
        index = i+(j*NUM_STATES)-NUM_STATES
        speciation[index] := speciation_observed[i] * speciation_hidden[j]
        extinction[index] := extinction_observed[i] * extinction_hidden[j]
    }
}
```

## Definir la Matriz de Transici√≥n entre Estados Observables

``` r
rate_pr := T.treeLength() / 10
for ( i in 1:(NUM_STATES*(NUM_STATES-1)) ) {
    transition_rates[i] ~ dnExp(rate_pr)
    moves.append( mvScale(transition_rates[i], lambda=0.50, tune=true, weight=3.0) )
}
```

## Definir la Matriz de Transici√≥n entre Estados Ocultos

``` r
hidden_rate ~ dnExponential(rate_pr)
moves.append( mvScale(hidden_rate, lambda=0.5, tune=true, weight=5) )
for (i in 1:(NUM_HIDDEN * (NUM_HIDDEN - 1))) {
    R[i] := hidden_rate
}
```

## Crear la Matriz de Transici√≥n `Q` Combinada

``` r
rate_matrix := fnHiddenStateRateMatrix(transition_rates, R, rescaled=false)
```

## Definir la Distribuci√≥n de los Estados en la Ra√≠z

``` r
rate_category_prior ~ dnDirichlet( rep(1,NUM_RATES) )
```

## Optimizaci√≥n con Movimientos MCMC

``` r
moves.append( mvBetaSimplex(rate_category_prior, tune=true, weight=2) )
moves.append( mvDirichletSimplex(rate_category_prior, tune=true, weight=2) )
```

## Definir la Edad de la Ra√≠z del √Årbol

``` r
root <- T.rootAge()
```

## Definir la Probabilidad de Muestreo de Especies ($\rho$)

``` r
rho <- T.ntips()/3000.0
```

## Definir el √Årbol Bajo un Proceso de Diversificaci√≥n Dependiente del Estado

``` r
timetree ~ dnCDBDP( rootAge = root, speciationRates = speciation, extinctionRates = extinction, Q = rate_matrix, delta = 1.0, pi = rate_category_prior, rho = rho, condition = "survival")
```

‚úîÔ∏è **Par√°metros clave:**

-   **`rootAge = root`** ‚Üí La edad de la ra√≠z se fija a la edad del √°rbol observado.

-   **`speciationRates = speciation`** ‚Üí Tasas de especiaci√≥n combinadas (`Œª`), que incluyen efectos de los estados ocultos.

-   **`extinctionRates = extinction`** ‚Üí Tasas de extinci√≥n combinadas (`Œº`), modeladas de la misma manera.

-   **`Q = rate_matrix`** ‚Üí Matriz de tasas de transici√≥n entre estados (`0A ‚Üî 1A`, `0B ‚Üî 1B`, etc.).

-   **`delta = 1.0`** ‚Üí Modelo est√°ndar en el que las tasas de diversificaci√≥n dependen completamente del estado.

-   **`pi = rate_category_prior`** ‚Üí Prior de las probabilidades de estado en la ra√≠z.

-   **`rho = rho`** ‚Üí Ajuste por sesgo de muestreo de especies.

-   **`condition = "survival"`** ‚Üí Se modela solo en √°rboles que han sobrevivido hasta el presente.

## Ajustar el Modelo a la Filogenia Observada

``` r
timetree.clamp(T)
```

## Ajustar el Modelo a los Datos de Caracteres

``` r
timetree.clampCharData(data_exp)
```

## Definir el Modelo en RevBayes

``` r
mymodel = model(rate_matrix)
```

## **Configurar Monitores para Guardar Resultados**

``` r
# Monitor Principal del Modelo
monitors.append( mnModel(filename="../out/Hisse/mitos_HiSSE_clyttini_TUTscript.log", printgen=1) )

# Monitor de Estados Ancestrales
monitors.append(mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="NaturalNumbers", printgen=1, withTips=true, withStartStates=false, filename="../out/Hisse/anc_states_mitos_HiSSE_clyttini_TUTscript.log"))

# Monitor de Mapeo Estoc√°stico de Caracteres
monitors.append(mnStochasticCharacterMap(cdbdp=timetree, printgen=10, filename="../out/Hisse/stoch_char_map_mitos_HiSSE_clyttini_TUTscript.log", include_simmap=true))

# Monitor en Pantalla
monitors.append(mnScreen(printgen=10, speciation_observed, extinction_observed))
```

## Configurar el Algoritmo MCMC

``` r
### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random", combine="mixed")
```

## Ejecutar el MCMC

``` r
mymcmc.run(generations=400)
```

## Cargar la Trazabilidad de los Estados Ancestrales

``` r
anc_states2 = readAncestralStateTrace("../out/Hisse/anc_states_mitos_HiSSE_clyttini_TUTscript.log")
```

## Construcci√≥n del √Årbol con Estados Ancestrales

``` r
anc_tree = ancestralStateTree(tree=T, ancestral_state_trace_vector = anc_states2, include_start_states=false, file = "../out/Hisse/anc_states_mitos_HiSSE_clyttini_TUTscript.tree", burnin = 2, summary_statistic = "MAP", site=1)
```

## Definir Par√°metros para la Resumir Estados Ancestrales

``` r
burnin=10
n_time_slices = 500
```

‚úÖ **`burnin = 25`** ‚Üí Descarta las **primeras 25 iteraciones** del MCMC antes de hacer el resumen.\
‚úÖ **`n_time_slices = 500`** ‚Üí Divide el √°rbol en **500 segmentos de tiempo** para interpolar los cambios de estado.

## Leer la Historia del Car√°cter Inferida por Mapeo Estoc√°stico

``` r
anc_states_SCHM = readAncestralStateTrace("../out/Hisse/stoch_char_map_mitos_HiSSE_clyttini_TUTscript.log")
```

## Crear el √Årbol de Mapeo Estoc√°stico de Caracteres

``` r
char_map_tree = characterMapTree(tree=T, 
                 ancestral_state_trace_vector=anc_states_SCHM, 
                 character_file="../out/Hisse/stoch_mitos_HiSSE_clyttini_TUTscriptmarginal_char.tree", 
                 posterior_file="../out/Hisse/stoch_mitos_HiSSE_clyttini_TUTscriptmarginal_post.tree", 
                 burnin=burnin, 
                 num_time_slices=n_time_slices)
```

## Visualizaci√≥n en R con RevGadgets

```{r, results='hide'}
# Cargar el archivo de estados ancestrales
hisse_file <- paste0("../docs/u1_PatDiv/output/hisse/anc_states_mitos_HiSSE_clyttini_TUTscript.tree")

p_anc_hisse <- processAncStates(hisse_file)

# Definir paleta de colores personalizada
traitcols <- c("#F29494", "#5FD9D9", "#9DD962", "#D48DF2")  # Rojo para estado 0, azul para estado 1

# Generar el gr√°fico con estados ancestrales
plot_hisse <- plotAncStatesMAP(p_anc_hisse,
        tree_layout = "rect",
        tip_labels_size = 1) +
        # Aplicar la paleta de colores
        scale_color_manual(values = traitcols) +
        scale_fill_manual(values = traitcols) +
        # Modificar leyenda y otros elementos de ggplot2
        theme(legend.position = c(0.1, 0.85),
              legend.key.size = unit(0.3, 'cm'), # Tama√±o de la clave de la leyenda
              legend.title = element_text(size = 6), # Tama√±o del t√≠tulo de la leyenda
              legend.text = element_text(size = 4))  # Tama√±o del texto de la leyenda

# Mostrar el gr√°fico
plot_hisse

# Generar el gr√°fico con ramas coloreadas por estado ancestral
plot_hisse_2 <- ggtree(p_anc_hisse, layout = "rectangular", aes(color = anc_state_1)) +
  scale_color_manual(name = "Estado", values = traitcols) +  
  theme_minimal() +
  ggtitle("HISSE") +
  theme(legend.position = c(0.1, 0.85),
        legend.key.size = unit(0.3, 'cm'), # Tama√±o de la clave de la leyenda
        legend.title = element_text(size = 6), # Tama√±o del t√≠tulo de la leyenda
        legend.text = element_text(size = 4))  # Tama√±o del texto de la leyenda

# Mostrar el gr√°fico
plot_hisse_2
```

## Graficar las tasas de diversificaci√≥n neta

```{r}
# Leer el archivo de salida de RevBayes
hisse <- read.table("../docs/u1_PatDiv/output/hisse/mitos_HiSSE_clyttini_TUTscript.log", header = TRUE)

# Definir paleta de colores personalizada
traitcols <- c("#F29494", "#5FD9D9", "#9DD962", "#D48DF2")  # Rojo para estado 0, azul para estado 1

# Calcular la tasa de diversificaci√≥n neta: especiaci√≥n - extinci√≥n
netdiversification_rates <- data.frame(
  dens = c(hisse$speciation_observed.1. - hisse$extinction_observed.1.,
           hisse$speciation_observed.2. - hisse$extinction_observed.2.,
           hisse$speciation_hidden.1. - hisse$extinction_hidden.1.,
           hisse$speciation_hidden.2. - hisse$extinction_hidden.2.),
  rate = rep(c("0A", "1A", "0B", "1B"), each = length(hisse$speciation_observed.1.))
  )

# Convertir la variable de estado en factor
netdiversification_rates$rate <- factor(netdiversification_rates$rate, levels = c("0A", "1A", "0B", "1B"))

# Crear el gr√°fico de viol√≠n para tasas de diversificaci√≥n neta
violin_diversification <- ggplot(netdiversification_rates, aes(x = rate, y = dens, fill = rate)) +
  geom_violin(trim = FALSE) +
  labs(title = "Tasas de Diversificaci√≥n Neta", x = "Estado", y = "Tasa") +
  scale_fill_manual(name = "Estado", values = traitcols) +
  theme_classic()

# Mostrar la gr√°fica
violin_diversification
```

## Graficar tasas de especiaci√≥n

```{r}
# Crear un dataframe con tasas de especiaci√≥n para cada estado
speciation_rates <- data.frame(
  dens = c(hisse$speciation_observed.1.,  hisse$speciation_observed.2.,
           hisse$speciation_hidden.1., hisse$speciation_hidden.2.), 
  rate = rep(c("0A", "1A", "0B", "1B"), each = length(hisse$speciation_observed.1.))
)

# Crear gr√°fico de viol√≠n para las tasas de especiaci√≥n
violin_speciation <- ggplot(speciation_rates, aes(x = rate, y = dens, fill = rate)) +
  geom_violin(trim = FALSE) +
  labs(title = "Tasas de Especiaci√≥n", x = "Estado", y = "Tasa de Especiaci√≥n") +
  scale_fill_manual(name = "Estado", values = traitcols) +
  theme_classic()

# Mostrar la gr√°fica
violin_speciation
```

## Graficar tasas de extinci√≥n

```{r}
# Crear un dataframe con tasas de extinci√≥n para cada estado
extinction_rates <- data.frame(
  dens = c(hisse$extinction_observed.1., hisse$extinction_observed.2.,
           hisse$extinction_hidden.1., hisse$extinction_hidden.2.), 
  rate = rep(c("0A", "1A", "0B", "1B"), each = length(hisse$extinction_observed.1.))
)

# Crear gr√°fico de viol√≠n para tasas de extinci√≥n
violin_extinction <- ggplot(extinction_rates, aes(x = rate, y = dens, fill = rate)) +
  geom_violin(trim = FALSE) +
  labs(title = "Tasas de Extinci√≥n", x = "Estado", y = "Tasa de Extinci√≥n") +
  scale_fill_manual(name = "Estado", values = traitcols) +
  theme_classic()

# Mostrar la gr√°fica
violin_extinction
```
